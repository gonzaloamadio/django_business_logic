# -*- coding: utf-8 -*-
from django.test import TestCase
from django.core.exceptions import ValidationError
from datetime import timedelta
from django.utils import timezone
import uuid

from posts.models import Job
import tektank.libs_project.shortuuid as _su

from unittest.mock import patch

# To create fake data
from faker import Factory
faker = Factory.create()

import factory

class JobFactory(factory.DjangoModelFactory):
    class Meta:
        model = Job

    title = faker.word()
    email = faker.email()
    date_start = timezone.now()
    date_end = timezone.now() + timedelta(hours=3)
    amount_to_pay = faker.random_number(1,100)


class JobCreationTest(TestCase):

    def setUp(self, **kwargs):
        self.start = timezone.now()
        self.end = timezone.now() + timedelta(hours=3)

        uuid_01 = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
        uuid_02 = uuid.UUID('{00010203-0405-0607-0000-0a0b0c0d0e0f}')
        #self.job_01 = Job.objects.create(id=uuid_01,title='Job 01',email='job01@gmail.com',date_start = self.start,date_end= self.end,amount_to_pay = 10)
        self.job_01 = JobFactory(id=uuid_01)
        self.job_02 = JobFactory(id=uuid_02)

    def test_uuid_encoding(self):
        self.assertEqual(_su.encode(self.job_01.id),'332uXNfuFYCm4NndbGxiVD')
        self.assertEqual(_su.encode(self.job_02.id),'332uXNfuFYC43sNZmnNTUc')

    def test_job_field_not_modified_on_creation(self):
        import datetime
        import pytz
        aware_start = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)
        aware_end = datetime.datetime(2012, 8, 15, 8, 15, 12, 0, pytz.UTC)
        j = Job.objects.create(title="my faked title",date_start=aware_start, date_end=aware_end, amount_to_pay=10, email='fake@gmail.com')

        self.assertTrue(isinstance(j, Job))
        self.assertEqual(j.title, "my faked title")
        self.assertEqual(j.date_start, aware_start)
        self.assertEqual(j.date_end, aware_end)
        self.assertEqual(j.amount_to_pay, 10)
        self.assertEqual(j.email, 'fake@gmail.com')

    def test_creation(self):
        print("########## test_creation of jobs ##########")

        long_str="this is ignored and this is one veeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeery long slug, it should be ignored, i guess this has more than 157 chars 123456789123456789123456789123456789"

        # Invalid slugs, long slugs, no slugs. Slug is autogenerated, so no
        # matter what we pass there, it should be ok
        self.assertTrue(JobFactory(slug="a/s"))
        self.assertTrue(JobFactory(slug="this is ignored"))
        self.assertTrue(JobFactory(slug=long_str))

        ### All failing cases ###

        # Title very long
        with self.assertRaises(ValidationError):
            self.assertTrue(JobFactory(title=long_str))
        # No email
        with self.assertRaises(ValidationError):
            self.assertTrue(Job.objects.create(title=faker.word(),date_start = self.start,date_end= self.end,amount_to_pay = 10))
        # No date_start
        with self.assertRaises(ValidationError):
            self.assertTrue(Job.objects.create(title=faker.word(),email=faker.email(),date_end= self.end,amount_to_pay = 10))
        # No date_end
        with self.assertRaises(ValidationError):
            self.assertTrue(Job.objects.create(title=faker.word(),email=faker.email(),date_start = self.start,amount_to_pay = 10))
        # No amount_to_pay
        with self.assertRaises(ValidationError):
            self.assertTrue(Job.objects.create(title=faker.word(),email=faker.email(),date_start = self.start,date_end= self.end))
